// Code generated by MockGen. DO NOT EDIT.
// Source: D:/golangProj/tgbot/internal/repository/bot_repo.go
//
// Generated by this command:
//
//	mockgen -source=D:/golangProj/tgbot/internal/repository/bot_repo.go -destination=mocks/mock_repoy .go -package=mocks
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	repository "github.com/vladislavprovich/TG-bot/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockBOTRepository is a mock of BOTRepository interface.
type MockBOTRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBOTRepositoryMockRecorder
	isgomock struct{}
}

// MockBOTRepositoryMockRecorder is the mock recorder for MockBOTRepository.
type MockBOTRepositoryMockRecorder struct {
	mock *MockBOTRepository
}

// NewMockBOTRepository creates a new mock instance.
func NewMockBOTRepository(ctrl *gomock.Controller) *MockBOTRepository {
	mock := &MockBOTRepository{ctrl: ctrl}
	mock.recorder = &MockBOTRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBOTRepository) EXPECT() *MockBOTRepositoryMockRecorder {
	return m.recorder
}

// DeleteAllURL mocks base method.
func (m *MockBOTRepository) DeleteAllURL(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllURL", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllURL indicates an expected call of DeleteAllURL.
func (mr *MockBOTRepositoryMockRecorder) DeleteAllURL(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllURL", reflect.TypeOf((*MockBOTRepository)(nil).DeleteAllURL), ctx, userID)
}

// DeleteURL mocks base method.
func (m *MockBOTRepository) DeleteURL(ctx context.Context, originalURL, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, originalURL, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockBOTRepositoryMockRecorder) DeleteURL(ctx, originalURL, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockBOTRepository)(nil).DeleteURL), ctx, originalURL, userID)
}

// GetListURL mocks base method.
func (m *MockBOTRepository) GetListURL(ctx context.Context, userID string) ([]*repository.URLCombined, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListURL", ctx, userID)
	ret0, _ := ret[0].([]*repository.URLCombined)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListURL indicates an expected call of GetListURL.
func (mr *MockBOTRepositoryMockRecorder) GetListURL(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListURL", reflect.TypeOf((*MockBOTRepository)(nil).GetListURL), ctx, userID)
}

// SaveURL mocks base method.
func (m *MockBOTRepository) SaveURL(ctx context.Context, req repository.SaveUrlRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockBOTRepositoryMockRecorder) SaveURL(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockBOTRepository)(nil).SaveURL), ctx, req)
}

// MockDBExecutor is a mock of DBExecutor interface.
type MockDBExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDBExecutorMockRecorder
	isgomock struct{}
}

// MockDBExecutorMockRecorder is the mock recorder for MockDBExecutor.
type MockDBExecutorMockRecorder struct {
	mock *MockDBExecutor
}

// NewMockDBExecutor creates a new mock instance.
func NewMockDBExecutor(ctrl *gomock.Controller) *MockDBExecutor {
	mock := &MockDBExecutor{ctrl: ctrl}
	mock.recorder = &MockDBExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBExecutor) EXPECT() *MockDBExecutorMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockDBExecutor) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBExecutorMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDBExecutor)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockDBExecutor) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBExecutorMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDBExecutor)(nil).QueryContext), varargs...)
}
